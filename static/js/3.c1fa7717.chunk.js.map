{"version":3,"file":"static/js/3.c1fa7717.chunk.js","mappings":"iLACA,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAwI,wBAAxI,EAA2K,0BAA3K,EAA+M,yB,mBCgB/M,EARmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,gBAAKC,UAAWC,EAAhB,UACH,SAAC,KAAD,CAASC,GAAIJ,EAAb,SAAoBD,EAAMM,UCClC,EALgB,SAACN,GACb,OAAO,gBAAKG,UAAWC,EAAhB,SAA4BJ,EAAMO,W,8BCI7C,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAPoB,SAACC,GACrB,MAAO,CACHC,WAAYD,EAAMC,eAMtBC,EAAAA,EAFJ,ECoBuB,SAACZ,GAEpB,IAAMa,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXV,QAAS,IAEbW,SAAU,SAACC,GAAY,IAAD,EACZC,EAAoB,GAQ1B,OANKD,EAAOZ,SAED,UAAAY,EAAOZ,eAAP,eAAgBc,QAAS,KAChCD,EAAOb,QAAU,4BAFjBa,EAAOb,QAAU,WAKda,GAEXE,SAAU,SAAAH,GACNN,GAASU,EAAAA,EAAAA,GAAYJ,EAAOZ,UAC5BQ,EAAOS,eAIXC,EAAkBzB,EAAMW,WAAWe,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAiBJ,GAAI0B,EAAE1B,IAAZ0B,EAAE1B,OACrF2B,EAAmB7B,EAAMW,WAAWmB,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAASxB,QAASwB,EAAExB,SAAcwB,EAAE7B,OAG9F,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKqB,KAEL,gBAAKtB,UAAWC,EAAhB,UACI,+BAAOyB,QAGX,SAAC,KAAD,CAAgBG,MAAOjB,EAAvB,UACI,kBAAMO,SAAUP,EAAOkB,aAAvB,WACI,6BACIC,YAAa,kBAITnB,EAAOoB,cAAc,aAE5BpB,EAAOqB,QAAQ7B,SAAWQ,EAAOK,OAAOb,UACrC,gBAAK8B,MAAO,CAACC,MAAO,OAApB,SAA6BvB,EAAOK,OAAOb,WAC/C,mBAAQgC,KAAK,SAAb","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__H5v5+\",\"dialogsItem\":\"Dialogs_dialogsItem__0HCiw\",\"active\":\"Dialogs_active__D8u2D\",\"dialog\":\"Dialogs_dialog__ymoD5\",\"messages\":\"Dialogs_messages__iNOj8\",\"message\":\"Dialogs_message__k2TLP\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    let path = '/dialogs/' + props.id;\r\n\r\n    return <div className={s.dialog}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\n\r\ntype MessageType = {\r\n    message: string\r\n\r\n}\r\n\r\nconst Message = (props: MessageType) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogPage: state.dialogPage,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps),\r\n    withAuthRedirect\r\n)(Dialogs)","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {useFormik, FormikProvider} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {sendMessage} from \"../../redux/dialogs-reducer\";\r\n\r\n\r\ntype MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\ntype DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\ntype DialogPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\n\r\ntype DialogsPropsType = {\r\n    dialogPage: DialogPageType\r\n    onSendMessageClick: (values: string) => void\r\n}\r\n\r\ntype ErrorType = {\r\n    message?: string,\r\n}\r\n\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: ErrorType = {};\r\n\r\n            if (!values.message) {\r\n                errors.message = 'Required';\r\n            } else if (values.message?.length > 50) {\r\n                errors.message = 'Max length is 50 symbols';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(sendMessage(values.message))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    let dialogsElements = props.dialogPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>)\r\n    let messagesElements = props.dialogPage.messages.map(m => <Message message={m.message} key={m.id}/>)\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div> {messagesElements}</div>\r\n\r\n            </div>\r\n            <FormikProvider value={formik}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <textarea\r\n                        placeholder={'Enter you text'}\r\n                        // name=\"message\"\r\n                        // onChange={formik.handleChange}\r\n                        // value={formik.values.message}\r\n                        {...formik.getFieldProps('message')}\r\n                    />\r\n                    {formik.touched.message && formik.errors.message &&\r\n                        <div style={{color: 'red'}}>{formik.errors.message}</div>}\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </FormikProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\n"],"names":["props","path","id","className","s","to","name","message","compose","connect","state","dialogPage","withAuthRedirect","dispatch","useDispatch","formik","useFormik","initialValues","validate","values","errors","length","onSubmit","sendMessage","resetForm","dialogsElements","dialogs","map","d","messagesElements","messages","m","value","handleSubmit","placeholder","getFieldProps","touched","style","color","type"],"sourceRoot":""}