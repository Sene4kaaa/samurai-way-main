{"version":3,"file":"static/js/528.02648c57.chunk.js","mappings":"2NACA,EAAmC,sC,4BCOtBA,EAAyB,SAACC,GAEnC,OAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAASD,EAAMI,QAA3C,eAAOA,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAgBV,OACI,4BACMF,IACE,0BACI,iBAAMK,cAlBG,WACrBJ,GAAY,IAiBA,SAAwCH,EAAMI,QAAU,iBAG/DF,IACG,0BACI,kBAAOM,SAdA,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAamBC,WAAW,EAAMC,OAnBvC,WACvBV,GAAY,GACZH,EAAMc,aAAaV,IAkBAO,MAAOP,U,UCVlC,EAjBoB,SAACJ,GACjB,OAAKA,EAAMe,SAKP,0BACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKC,IAAmC,MAA9BlB,EAAMe,QAAQI,OAAOC,MACzBpB,EAAMe,QAAQI,OAAOC,MACrBC,KACN,SAACtB,EAAD,CAAwBK,OAAQJ,EAAMI,OAAQU,aAAcd,EAAMc,qBATnE,SAACQ,EAAA,EAAD,KCff,EAA4B,2BAA5B,EAA+D,uBCA/D,EAAuB,mBCoBvB,EAba,SAACtB,GACV,OACI,iBAAKgB,UAAWC,EAAhB,WACI,gBACIC,IAAK,wHACRlB,EAAMuB,SACP,4BACI,oCAAmBvB,EAAMwB,kB,2BC0DzC,EAlDgBC,EAAAA,MAAW,SAACzB,GACxB0B,QAAQC,IAAI,UACZ,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXT,QAAS,IAEbU,SAAU,SAACC,GAAY,IAAD,EACZC,EAAoB,GAQ1B,OANKD,EAAOX,SAED,UAAAW,EAAOX,eAAP,eAAgBa,QAAS,MAChCD,EAAOZ,QAAU,6BAFjBY,EAAOZ,QAAU,WAKdY,GAEXE,SAAU,SAAAH,GACNN,GAASU,EAAAA,EAAAA,IAAQJ,EAAOX,UACxBO,EAAOS,eAIXC,EAAgBxC,EAAMyC,MAAMC,KAAI,SAAAC,GAAC,OAAI,0BAAgB,SAAC,EAAD,CAAMpB,QAASoB,EAAEpB,QAASC,WAAYmB,EAAEC,eAA9CD,EAAEE,OAGrD,OACI,iBAAK7B,UAAWC,EAAhB,WACI,sCACA,SAAC,KAAD,CAAgBN,MAAOmB,EAAvB,UACI,kBAAMO,SAAUP,EAAOgB,aAAvB,WACI,0BACIC,YAAa,kBACTjB,EAAOkB,cAAc,aAE5BlB,EAAOmB,QAAQ1B,SAAWO,EAAOK,OAAOZ,UACrC,gBAAK2B,MAAO,CAACC,MAAO,OAApB,SAA6BrB,EAAOK,OAAOZ,WAC/C,mBAAQ6B,KAAK,SAAb,0BAGR,gBAAKpC,UAAWC,EAAhB,SACKuB,UCtDJa,GAAmBC,EAAAA,EAAAA,KANR,SAACC,GACrB,MAAO,CACHd,MAAOc,EAAMC,YAAYf,SAIDa,CAAyBG,GCQzD,EATgB,SAACzD,GACb,OACI,4BACI,SAAC,EAAD,CAAae,QAASf,EAAMe,QAASX,OAAQJ,EAAMI,OAAQU,aAAcd,EAAMc,gBAC/E,SAACuC,EAAD,Q,8BCgBNK,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAoBD,OApBCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAEF,WACI,IAAIC,EAASC,KAAK5D,MAAM6D,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAK5D,MAAM+D,mBAEhBH,KAAK5D,MAAMgE,QAAQC,KAAK,UAGhCL,KAAK5D,MAAMkE,iBAAiBP,GAC5BC,KAAK5D,MAAMmE,YAAYR,KAE1B,oBAED,WACI,OAAOC,KAAK5D,MAAMe,SACd,SAAC,GAAD,kBAAa6C,KAAK5D,OAAlB,IAAyBe,QAAS6C,KAAK5D,MAAMe,QAASX,OAAQwD,KAAK5D,MAAMI,OAChEU,aAAc8C,KAAK5D,MAAMoE,kBAClC,SACP,EApBCV,CAAyBjC,EAAAA,WA+B/B,GAAe4C,EAAAA,EAAAA,KACXf,EAAAA,EAAAA,KARoB,SAACC,GAAD,MAA6C,CACjExC,QAASwC,EAAMC,YAAYzC,QAC3BX,OAAQmD,EAAMC,YAAYpD,OAC1B2D,iBAAkBR,EAAMe,KAAKX,OAC7BY,OAAQhB,EAAMe,KAAKC,UAIM,CAACL,iBAAkBM,EAAAA,GAAgBL,YAAaM,EAAAA,GAAWL,eAAgBtD,EAAAA,KACpG4D,EAAAA,GACAC,EAAAA,EAHJ,CAIEjB","sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBloch\":\"ProfileInfo_descriptionBloch__qJ4Zw\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusWithHooksPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusWithHooksPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>{props.status || '----------'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport UserAvatar from \"../../../assets/images/UserAvatar.png\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBloch}>\r\n                <img src={props.profile.photos.large != null\r\n                    ? props.profile.photos.large\r\n                    : UserAvatar}/>\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__SV+6r\",\"posts\":\"MyPosts_posts__6EdvY\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__LRLWK\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string,\r\n    likeCounts: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src={'https://w7.pngwing.com/pngs/862/646/png-transparent-beard-hipster-male-man-avatars-xmas-giveaway-icon-thumbnail.png'}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like </span>{props.likeCounts}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {FormikProvider, useFormik} from \"formik\";\r\n\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\n\r\n\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likesCounts: number\r\n}\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype ErrorType = {\r\n    message?: string,\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    console.log('RENDER')\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: ErrorType = {};\r\n\r\n            if (!values.message) {\r\n                errors.message = 'Required';\r\n            } else if (values.message?.length > 150) {\r\n                errors.message = 'Max length is 150 symbols';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(addPost(values.message))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    let postsElements = props.posts.map(p => <div key={p.id}><Post message={p.message} likeCounts={p.likesCounts}/>\r\n    </div>)\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <FormikProvider value={formik}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <input\r\n                        placeholder={'Enter you text'}\r\n                        {...formik.getFieldProps('message')}\r\n                    />\r\n                    {formik.touched.message && formik.errors.message &&\r\n                        <div style={{color: 'red'}}>{formik.errors.message}</div>}\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </FormikProvider>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps)(MyPosts)\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: any\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfileTC: (userId: string) => void\r\n    getStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport type ProfileContainerPropsType = MapStatePropsType & MapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType, {}> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n\r\n    }\r\n\r\n    render() {\r\n        return this.props.profile ? (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatusTC}/>\r\n        ) : null\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileTC: getUserProfile, getStatusTC: getStatus, updateStatusTC: updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","className","s","src","photos","large","UserAvatar","Preloader","message","likeCounts","React","console","log","dispatch","useDispatch","formik","useFormik","initialValues","validate","values","errors","length","onSubmit","addPost","resetForm","postsElements","posts","map","p","likesCounts","id","handleSubmit","placeholder","getFieldProps","touched","style","color","type","MyPostsContainer","connect","state","profilePage","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfileTC","getStatusTC","updateStatusTC","compose","auth","isAuth","getUserProfile","getStatus","withRouter","withAuthRedirect"],"sourceRoot":""}