{"version":3,"file":"static/js/286.31b3b89f.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBloch\":\"ProfileInfo_descriptionBloch__qJ4Zw\",\"mainPhoto\":\"ProfileInfo_mainPhoto__XfMvC\",\"contact\":\"ProfileInfo_contact__5-BmK\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusWithHooksPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusWithHooksPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status</b>: <span onDoubleClick={activateEditMode}>{props.status || '----------'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {ProfileContactsPropsType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: (event: React.MouseEvent) => void\r\n}\r\n\r\nexport const ProfileData = (props: ProfileDataPropsType) => {\r\n    return (\r\n        <div>\r\n            {props.isOwner && <div>\r\n                <button onClick={props.goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {props.profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {props.profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n                <div>\r\n                    <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\r\n                </div>\r\n            <div>\r\n                <b>About me</b>: {props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {\r\n                Object.keys(props.profile.contacts).map(key => {\r\n                    const value: string = props.profile.contacts[key as keyof ProfileContactsPropsType]\r\n                    return <Contact key={key} contactTitle={key} contactValue={value}/>\r\n                })\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact = (props: ContactPropsType) => {\r\n    return <div className={s.contact}><b>{props.contactTitle}</b>: {props.contactValue}</div>\r\n}\r\n","import {\r\n    ProfileContactsPropsType,\r\n    ProfileType,\r\n    ProfileUpdateDataType,\r\n    saveProfile\r\n} from \"../../../redux/profile-reducer\";\r\nimport React from \"react\";\r\nimport {FormikProvider, useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    saveProfile: (profile: ProfileUpdateDataType) => void\r\n    exitEditMode: (event: React.MouseEvent) => void\r\n}\r\n\r\nexport const ProfileDataForm = (props: ProfileDataFormPropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: props.profile.fullName,\r\n            lookingForAJob: props.profile.lookingForAJob,\r\n            lookingForAJobDescription: props.profile.lookingForAJobDescription,\r\n            aboutMe: props.profile.aboutMe,\r\n            contacts: props.profile.contacts\r\n        },\r\n\r\n        onSubmit: (values) => {\r\n            dispatch(saveProfile(values))\r\n            dispatch(props.exitEditMode)\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <FormikProvider value={formik}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <div>\r\n                        <button type=\"submit\">save\r\n                        </button>\r\n                    </div>\r\n                    <div>\r\n                        <b>Full name</b>: <div>\r\n                        <input\r\n                            placeholder={'Full Name'}\r\n                            {...formik.getFieldProps('fullName')}\r\n                        />\r\n                    </div>\r\n                    </div>\r\n                    <div>\r\n                        <b>Looking for a job</b>: <div>\r\n                        <input\r\n                            type={'checkbox'}\r\n                            name=\"lookingForAJob\"\r\n                            onChange={formik.handleChange}\r\n                            checked={formik.values.lookingForAJob}\r\n                        />\r\n                    </div>\r\n                    </div>\r\n                    <div>\r\n                        <b>My professional skills</b>: <div>\r\n                        <input\r\n                            placeholder={'My professional skills'}\r\n                            {...formik.getFieldProps('lookingForAJobDescription')}\r\n                        />\r\n                    </div>\r\n                    </div>\r\n                    <div>\r\n                        <b>About me</b>: <div>\r\n                        <textarea\r\n                            placeholder={'About me'}\r\n                            {...formik.getFieldProps('aboutMe')}\r\n                        />\r\n                    </div>\r\n                    </div>\r\n                </form>\r\n            </FormikProvider>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileType, ProfileUpdateDataType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport UserAvatar from \"../../../assets/images/UserAvatar.png\";\r\nimport {ProfileData} from \"./ProfileData\";\r\nimport {ProfileDataForm} from \"./ProfileDataForm\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile: (profile: ProfileUpdateDataType) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBloch}>\r\n                <img src={props.profile.photos.large != null\r\n                    ? props.profile.photos.large\r\n                    : UserAvatar} className={s.mainPhoto}/>\r\n                {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                {editMode ? <ProfileDataForm profile={props.profile} saveProfile={props.saveProfile} exitEditMode={()=>{setEditMode(false)}}/> :\r\n                    <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }}/>}\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__SV+6r\",\"posts\":\"MyPosts_posts__6EdvY\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__LRLWK\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string,\r\n    likeCounts: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src={'https://w7.pngwing.com/pngs/862/646/png-transparent-beard-hipster-male-man-avatars-xmas-giveaway-icon-thumbnail.png'}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like </span>{props.likeCounts}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {FormikProvider, useFormik} from \"formik\";\r\n\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\n\r\n\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likesCounts: number\r\n}\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype ErrorType = {\r\n    message?: string,\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    console.log('RENDER')\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: ErrorType = {};\r\n\r\n            if (!values.message) {\r\n                errors.message = 'Required';\r\n            } else if (values.message?.length > 150) {\r\n                errors.message = 'Max length is 150 symbols';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(addPost(values.message))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    let postsElements = props.posts.map(p => <div key={p.id}><Post message={p.message} likeCounts={p.likesCounts}/>\r\n    </div>)\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <FormikProvider value={formik}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <input\r\n                        placeholder={'Enter you text'}\r\n                        {...formik.getFieldProps('message')}\r\n                    />\r\n                    {formik.touched.message && formik.errors.message &&\r\n                        <div style={{color: 'red'}}>{formik.errors.message}</div>}\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </FormikProvider>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps)(MyPosts)\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType, ProfileUpdateDataType} from \"../../redux/profile-reducer\";\r\n\r\nexport type ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photoFile: File) => void\r\n    saveProfile: (profile: ProfileUpdateDataType) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfileType, ProfileUpdateDataType,\r\n    savePhoto, saveProfile,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<PropsType, {}> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: Snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId)\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        return this.props.profile ? (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatusTC}\r\n                     savePhoto={this.props.savePhotoTC}\r\n                     saveProfile={this.props.saveProfileTC}/>\r\n        ) : null\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileTC: getUserProfile,\r\n        getStatusTC: getStatus,\r\n        updateStatusTC: updateStatus,\r\n        savePhotoTC: savePhoto,\r\n        saveProfileTC: saveProfile\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: any\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfileTC: (userId: string) => void\r\n    getStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n    savePhotoTC: (photoFile: File) => void\r\n    saveProfileTC: (profile: ProfileUpdateDataType) => void\r\n}\r\n\r\ninterface TimerSnapshot {\r\n}\r\n\r\ntype Snapshot = Readonly<TimerSnapshot>\r\n\r\nexport type ProfileContainerPropsType = MapStatePropsType & MapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileData","isOwner","onClick","goToEditMode","profile","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","className","s","ProfileDataForm","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","saveProfile","exitEditMode","resetForm","handleSubmit","type","placeholder","getFieldProps","name","handleChange","checked","Preloader","src","photos","large","UserAvatar","target","files","length","savePhoto","message","likeCounts","React","console","log","validate","errors","addPost","postsElements","posts","p","likesCounts","id","touched","style","color","MyPostsContainer","connect","state","profilePage","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfileTC","getStatusTC","refreshProfile","prevProps","prevState","snapshot","updateStatusTC","savePhotoTC","saveProfileTC","compose","auth","isAuth","getUserProfile","getStatus","withRouter","withAuthRedirect"],"sourceRoot":""}