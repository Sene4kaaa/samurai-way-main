{"version":3,"file":"static/js/554.61f6ef4d.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileData.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBloch\":\"ProfileInfo_descriptionBloch__qJ4Zw\",\"mainPhoto\":\"ProfileInfo_mainPhoto__XfMvC\",\"contact\":\"ProfileInfo_contact__5-BmK\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusWithHooksPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusWithHooksPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status</b>: <span onDoubleClick={activateEditMode}>{props.status || '----------'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\r\n                           value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {ProfileContactsPropsType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport React from \"react\";\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nexport const ProfileData = (props: ProfileDataPropsType) => {\r\n    return (\r\n        <div>\r\n            <div>\r\n                <b>Full name</b>: {props.profile.fullNam}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {props.profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {props.profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills</b>: {props.profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me</b>: {props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {\r\n                Object.keys(props.profile.contacts).map(key => {\r\n                    const value: string = props.profile.contacts[key as keyof ProfileContactsPropsType]\r\n                    return <Contact key={key} contactTitle={key} contactValue={value}/>\r\n                })\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact = (props: ContactPropsType) => {\r\n    return <div className={s.contact}><b>{props.contactTitle}</b>: {props.contactValue}</div>\r\n}\r\n","import React, {ChangeEvent} from \"react\";\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileContactsPropsType, ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport UserAvatar from \"../../../assets/images/UserAvatar.png\";\r\nimport {ProfileData} from \"./ProfileData\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photoFile: File) => void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBloch}>\r\n                <img src={props.profile.photos.large != null\r\n                    ? props.profile.photos.large\r\n                    : UserAvatar} className={s.mainPhoto}/>\r\n                {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n\r\n                <ProfileData profile={props.profile}/>\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postBlock\":\"MyPosts_postBlock__SV+6r\",\"posts\":\"MyPosts_posts__6EdvY\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__LRLWK\"};","import React from \"react\";\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string,\r\n    likeCounts: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img\r\n                src={'https://w7.pngwing.com/pngs/862/646/png-transparent-beard-hipster-male-man-avatars-xmas-giveaway-icon-thumbnail.png'}/>\r\n            {props.message}\r\n            <div>\r\n                <span>like </span>{props.likeCounts}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {FormikProvider, useFormik} from \"formik\";\r\n\r\nimport {useDispatch} from \"react-redux\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\n\r\n\r\ntype PostType = {\r\n    id: number\r\n    message: string\r\n    likesCounts: number\r\n}\r\n\r\ntype MyPostsPropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\ntype ErrorType = {\r\n    message?: string,\r\n}\r\n\r\nconst MyPosts = React.memo((props: MyPostsPropsType) => {\r\n    console.log('RENDER')\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: '',\r\n        },\r\n        validate: (values) => {\r\n            const errors: ErrorType = {};\r\n\r\n            if (!values.message) {\r\n                errors.message = 'Required';\r\n            } else if (values.message?.length > 150) {\r\n                errors.message = 'Max length is 150 symbols';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(addPost(values.message))\r\n            formik.resetForm();\r\n        },\r\n    });\r\n\r\n    let postsElements = props.posts.map(p => <div key={p.id}><Post message={p.message} likeCounts={p.likesCounts}/>\r\n    </div>)\r\n\r\n    return (\r\n        <div className={s.postBlock}>\r\n            <h3>My posts</h3>\r\n            <FormikProvider value={formik}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <input\r\n                        placeholder={'Enter you text'}\r\n                        {...formik.getFieldProps('message')}\r\n                    />\r\n                    {formik.touched.message && formik.errors.message &&\r\n                        <div style={{color: 'red'}}>{formik.errors.message}</div>}\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </FormikProvider>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\n\r\nexport default MyPosts;\r\n","import React from \"react\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps)(MyPosts)\r\n","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\nexport type ProfilePropsType = {\r\n    isOwner: boolean\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (photoFile: File) => void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo isOwner={props.isOwner} profile={props.profile} status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         savePhoto={props.savePhoto}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    ProfilePhotosPropsType,\r\n    ProfileType,\r\n    savePhoto,\r\n    updateStatus\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    authorizedUserId: any\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    getUserProfileTC: (userId: string) => void\r\n    getStatusTC: (userId: string) => void\r\n    updateStatusTC: (status: string) => void\r\n    savePhotoTC: (photoFile: File) => void\r\n}\r\n\r\ninterface TimerSnapshot {\r\n}\r\n\r\ntype Snapshot = Readonly<TimerSnapshot>\r\n\r\nexport type ProfileContainerPropsType = MapStatePropsType & MapDispatchToPropsType\r\n\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfileContainerPropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType, {}> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: Snapshot) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId)\r\n            this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        return this.props.profile ? (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatusTC}\r\n                     savePhoto={this.props.savePhotoTC}/>\r\n        ) : null\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileTC: getUserProfile,\r\n        getStatusTC: getStatus,\r\n        updateStatusTC: updateStatus,\r\n        savePhotoTC: savePhoto\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"names":["ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileData","profile","fullNam","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","className","s","Preloader","src","photos","large","UserAvatar","isOwner","type","target","files","length","savePhoto","message","likeCounts","React","console","log","dispatch","useDispatch","formik","useFormik","initialValues","validate","values","errors","onSubmit","addPost","resetForm","postsElements","posts","p","likesCounts","id","handleSubmit","placeholder","getFieldProps","touched","style","color","MyPostsContainer","connect","state","profilePage","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfileTC","getStatusTC","refreshProfile","prevProps","prevState","snapshot","updateStatusTC","savePhotoTC","compose","auth","isAuth","getUserProfile","getStatus","withRouter","withAuthRedirect"],"sourceRoot":""}